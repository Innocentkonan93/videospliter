import 'dart:async';
import 'dart:io';
import 'dart:developer';
import 'package:flutter/services.dart';
import 'package:get/get.dart';

/// Service pour g√©rer la r√©ception des vid√©os partag√©es via l'extension iOS
class SharingService extends GetxService {
  /// Stream pour √©couter les vid√©os partag√©es
  final Rx<File?> sharedVideo = Rx<File?>(null);

  /// Indicateur si une vid√©o a √©t√© partag√©e
  final RxBool hasSharedVideo = false.obs;

  /// Timer pour v√©rifier p√©riodiquement les vid√©os partag√©es
  Timer? _checkTimer;

  /// Nom du groupe d'applications pour le partage de donn√©es
  // static const String _appGroupName = 'group.com.meetsum.cutit';

  @override
  void onInit() {
    super.onInit();
    _startListening();
  }

  @override
  void onClose() {
    _stopListening();
    super.onClose();
  }

  /// D√©marre l'√©coute des vid√©os partag√©es
  void _startListening() {
    log("üéØ SharingService: D√©marrage de l'√©coute des vid√©os partag√©es");

    // V√©rifier imm√©diatement s'il y a une vid√©o partag√©e
    _checkForSharedVideo();

    // V√©rifier p√©riodiquement (toutes les 2 secondes)
    _checkTimer = Timer.periodic(const Duration(seconds: 2), (timer) {
      _checkForSharedVideo();
    });
  }

  /// Arr√™te l'√©coute des vid√©os partag√©es
  void _stopListening() {
    log("üõë SharingService: Arr√™t de l'√©coute des vid√©os partag√©es");
    _checkTimer?.cancel();
    _checkTimer = null;
  }

  /// V√©rifie s'il y a une nouvelle vid√©o partag√©e
  Future<void> _checkForSharedVideo() async {
    try {
      // Utiliser le plugin flutter_sharing_intent pour iOS
      if (Platform.isIOS) {
        await _checkIOSSharedVideo();
      }
    } catch (e) {
      log(
        "‚ùå SharingService: Erreur lors de la v√©rification des vid√©os partag√©es: $e",
      );
    }
  }

  /// V√©rifie les vid√©os partag√©es sur iOS
  Future<void> _checkIOSSharedVideo() async {
    try {
      // Ici nous utiliserons une m√©thode native pour acc√©der √† UserDefaults partag√©
      // Pour l'instant, nous simulons avec une m√©thode de test
      final result = await _getSharedVideoFromUserDefaults();

      if (result != null && result.isNotEmpty) {
        _handleSharedVideo(result);
      }
    } catch (e) {
      log("‚ùå SharingService: Erreur iOS: $e");
    }
  }

  /// R√©cup√®re la vid√©o partag√©e depuis UserDefaults (m√©thode native)
  Future<String?> _getSharedVideoFromUserDefaults() async {
    try {
      // Appel √† la m√©thode native iOS
      const platform = MethodChannel('com.meetsum.cutit/sharing');
      final result = await platform.invokeMethod('getSharedVideo');
      return result;
    } on PlatformException catch (e) {
      log("‚ùå SharingService: Erreur de plateforme: $e");
      return null;
    }
  }

  /// G√®re une vid√©o partag√©e re√ßue
  Future<void> _handleSharedVideo(String videoPath) async {
    try {
      log("üì• SharingService: Vid√©o partag√©e re√ßue: $videoPath");

      // V√©rifier si le fichier existe
      final file = File(videoPath);
      if (await file.exists()) {
        sharedVideo.value = file;
        hasSharedVideo.value = true;

        log("‚úÖ SharingService: Vid√©o partag√©e charg√©e avec succ√®s");

        // Nettoyer les donn√©es partag√©es apr√®s traitement
        await _clearSharedVideoData();
      } else {
        log("‚ö†Ô∏è SharingService: Fichier vid√©o introuvable: $videoPath");
      }
    } catch (e) {
      log(
        "‚ùå SharingService: Erreur lors du traitement de la vid√©o partag√©e: $e",
      );
    }
  }

  /// Nettoie les donn√©es de vid√©o partag√©e
  Future<void> _clearSharedVideoData() async {
    try {
      if (Platform.isIOS) {
        const platform = MethodChannel('com.meetsum.cutit/sharing');
        await platform.invokeMethod('clearSharedVideo');
        log("üßπ SharingService: Donn√©es partag√©es nettoy√©es");
      }
    } catch (e) {
      log("‚ùå SharingService: Erreur lors du nettoyage: $e");
    }
  }

  /// R√©cup√®re la vid√©o partag√©e actuelle et la r√©initialise
  File? getAndClearSharedVideo() {
    final video = sharedVideo.value;
    if (video != null) {
      sharedVideo.value = null;
      hasSharedVideo.value = false;
      log("üì§ SharingService: Vid√©o partag√©e r√©cup√©r√©e et r√©initialis√©e");
    }
    return video;
  }

  /// V√©rifie s'il y a une vid√©o partag√©e en attente
  bool get hasPendingSharedVideo =>
      hasSharedVideo.value && sharedVideo.value != null;
}
