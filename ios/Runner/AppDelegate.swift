import Firebase
import Flutter
import UIKit

@main
@objc class AppDelegate: FlutterAppDelegate {
  override func application(
    _ application: UIApplication,
    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?
  ) -> Bool {

    // Configuration Firebase
    FirebaseApp.configure()

    // Configuration du MethodChannel pour le partage de vid√©os
    let controller: FlutterViewController = window?.rootViewController as! FlutterViewController
    let sharingChannel = FlutterMethodChannel(
      name: "com.meetsum.cutit/sharing",
      binaryMessenger: controller.binaryMessenger)

    sharingChannel.setMethodCallHandler({
      (call: FlutterMethodCall, result: @escaping FlutterResult) -> Void in

      switch call.method {
      case "getSharedVideo":
        self.getSharedVideo(result: result)
      case "clearSharedVideo":
        self.clearSharedVideo(result: result)
      default:
        result(FlutterMethodNotImplemented)
      }
    })

    GeneratedPluginRegistrant.register(with: self)
    return super.application(application, didFinishLaunchingWithOptions: launchOptions)
  }
  // MARK: - Gestion des URLs personnalis√©es

  /// G√®re l'ouverture de l'application via URL personnalis√©e (cutit://)
  override func application(
    _ app: UIApplication,
    open url: URL,
    options: [UIApplication.OpenURLOptionsKey: Any] = [:]
  ) -> Bool {

    print("üì± AppDelegate: URL re√ßue: \(url)")

    // V√©rifier si c'est une URL de notre app
    if url.scheme == "cutit" {
      print("üì± AppDelegate: URL cutit re√ßue, traitement en cours...")

      // Notifier Flutter que l'app a √©t√© ouverte via URL
      DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
        self.notifyFlutterAboutURL(url: url)
      }

      return true
    }

    return false
  }

  /// Notifie Flutter qu'une URL a √©t√© re√ßue
  private func notifyFlutterAboutURL(url: URL) {
    guard let controller = window?.rootViewController as? FlutterViewController else { return }

    let sharingChannel = FlutterMethodChannel(
      name: "com.meetsum.cutit/sharing",
      binaryMessenger: controller.binaryMessenger)

    // Envoyer un message √† Flutter pour indiquer que l'app a √©t√© ouverte via URL
    sharingChannel.invokeMethod("onAppOpenedViaURL", arguments: url.absoluteString)

    print("üì± AppDelegate: Flutter notifi√© de l'ouverture via URL")
  }

  /// R√©cup√®re la vid√©o partag√©e depuis UserDefaults
  private func getSharedVideo(result: @escaping FlutterResult) {
    if let userDefaults = UserDefaults(suiteName: "group.com.meetsum.cutit") {
      if let videoUrl = userDefaults.string(forKey: "shared_video_url") {
        // V√©rifier si la vid√©o a √©t√© partag√©e r√©cemment (dans les 30 derni√®res secondes)
        let timestamp = userDefaults.double(forKey: "shared_video_timestamp")
        let currentTime = Date().timeIntervalSince1970

        if currentTime - timestamp < 30 {  // 30 secondes de validit√©
          print("üì± AppDelegate: Vid√©o partag√©e trouv√©e: \(videoUrl)")

          // Lancer l'application si elle n'est pas d√©j√† au premier plan
          if UIApplication.shared.applicationState != .active {
            DispatchQueue.main.async {
              UIApplication.shared.open(
                URL(string: "cutit://shared-video")!, options: [:], completionHandler: nil)
            }
          }

          result(videoUrl)
        } else {
          print("üì± AppDelegate: Vid√©o partag√©e expir√©e")
          result(nil)
        }
      } else {
        print("üì± AppDelegate: Aucune vid√©o partag√©e trouv√©e")
        result(nil)
      }
    } else {
      print("‚ùå AppDelegate: Impossible d'acc√©der √† UserDefaults partag√©")
      result(
        FlutterError(
          code: "UNAVAILABLE", message: "UserDefaults partag√© non accessible", details: nil))
    }
  }

  /// Nettoie les donn√©es de vid√©o partag√©e
  private func clearSharedVideo(result: @escaping FlutterResult) {
    if let userDefaults = UserDefaults(suiteName: "group.com.meetsum.cutit") {
      userDefaults.removeObject(forKey: "shared_video_url")
      userDefaults.removeObject(forKey: "shared_video_timestamp")
      userDefaults.removeObject(forKey: "shared_video_data")
      userDefaults.synchronize()

      print("üßπ AppDelegate: Donn√©es de vid√©o partag√©e nettoy√©es")
      result(true)
    } else {
      print("‚ùå AppDelegate: Impossible d'acc√©der √† UserDefaults partag√©")
      result(
        FlutterError(
          code: "UNAVAILABLE", message: "UserDefaults partag√© non accessible", details: nil))
    }
  }

}
